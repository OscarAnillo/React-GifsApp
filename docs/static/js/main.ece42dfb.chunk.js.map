{"version":3,"sources":["Components/add-category.js","Helpers/get-gifs.js","Components/gif-grid-Item.js","Components/gif-grid.js","Hooks/useFetchGifs.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","input","setInput","onSubmit","e","preventDefault","length","alert","category","type","placeholder","value","onChange","target","gifsGetter","cate","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","className","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cACpC,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OACE,sBAAMC,SAjBa,SAACC,GACpBA,EAAEC,kBAEO,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOK,SAAU,EACnBC,MAAM,iCAGRR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAAyBO,OACvCN,EAAS,MAST,SACE,uBACEO,KAAK,OACLC,YAAY,kBACZC,MAAOV,EACPW,SAVe,SAACR,GACpBF,EAASE,EAAES,OAAOF,Y,mCCpBTG,EAAU,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAClBC,EADkB,mGACgFF,GADhF,SAELG,MAAMD,GAFD,cAElBE,EAFkB,gBAGDA,EAAKC,OAHJ,uBAGhBC,EAHgB,EAGhBA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QATb,kBAYjBK,GAZiB,4CAAH,sDCAR,SAASO,EAAT,GAAsC,IAAfH,EAAc,EAAdA,MAAOT,EAAO,EAAPA,IAC3C,OACE,gCACE,qBAAKa,IAAKb,EAAKc,IAAI,KACnB,4BAAIL,OCAK,SAASM,EAAT,GAAgC,IAAbxB,EAAY,EAAZA,SAChC,ECDa,SAAsBA,GACnC,MAA0BR,mBAAS,CACjCqB,KAAM,GACNY,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACRtB,EAAWN,GAAU6B,MACnB,SAACC,GACCH,EAAS,CACPd,KAAMiB,EACNL,SAAS,MAGb,CAACzB,OAGE0B,EDhB2BK,CAAa/B,GAAjCmB,EAAd,EAAQN,KAAcY,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKzB,IACJyB,EACC,UAEA,qBAAKO,UAAU,4CAAf,SACGb,EAAOJ,KAAI,SAACC,GAAD,OACV,cAACK,EAAD,eAA8BL,GAAZA,EAAIC,YEVnB,SAASgB,IACtB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACE,qCACE,8CACA,cAACD,EAAD,CAAaC,cAAeA,IAE3B2C,EAAWnB,KAAI,SAACf,GAAD,OACd,cAACwB,EAAD,CAAwBxB,SAAUA,GAApBA,MAGhB,0BCZNmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACJ,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.ece42dfb.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function AddCategory({ setCategories }) {\r\n  const [input, setInput] = useState(\"\"); // \"controlled\" state\r\n\r\n  /* Submit handler for forms */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // prevents the form from refreshing\r\n    // some validation\r\n    if (input?.length <= 0) {\r\n      alert(\"Please type a valid category\");\r\n      return;\r\n    }\r\n    setCategories((category) => [input, ...category]); // receives a call back, input and copy of the array\r\n    setInput(\"\"); // after the input is added, the input is returned to the initial state\r\n  };\r\n\r\n  /* changeHandler for keypress */\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Add by gif name\"\r\n        value={input}\r\n        onChange={handleChange}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const gifsGetter = async (cate) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=wAU7ASL8Xp10wUsviGJnthj8psT6Hzw1&limit=10&q=${cate}`;\r\n  const resp = await fetch(url); // function fetch() from javascript\r\n  const { data } = await resp.json(); // data array is being destructured from the api response\r\n\r\n  const gifs = data.map((img) => { //img is my iterator\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","export default function GifGridItem({ title, url }) {\r\n  return (\r\n    <div>\r\n      <img src={url} alt=\"\" />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n}\r\n","import useFetchGifs from \"../Hooks/useFetchGifs\"; //Custom hook function\r\n\r\nimport GifGridItem from \"./gif-grid-Item\";\r\n\r\nexport default function GifGrid({ category }) {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading ? (\r\n        \"Loading\"\r\n      ) : (\r\n        <div className=\"row animate__animated  animate__slideInUp\">\r\n          {images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { gifsGetter } from \"../Helpers/get-gifs\"; //helper function\r\n\r\n/* This is a custom hook */\r\nexport default function useFetchGifs(category) {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    gifsGetter(category).then(\r\n      (imgs) => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      },\r\n      [category]\r\n    );\r\n  });\r\n  return state;\r\n}\r\n","import { useState } from \"react\";\r\n\r\nimport AddCategory from \"./add-category\";\r\nimport GifGrid from \"./gif-grid\";\r\n\r\nexport default function GifExpertApp() {\r\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n\r\n      {categories.map((category) => (\r\n        <GifGrid key={category} category={category} />\r\n      ))}\r\n\r\n      <hr />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./Components/GifExpertApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}